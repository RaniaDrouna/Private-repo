package Control;

import DAO.CinemaDAO;
import Model.Cinema;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

public class CinemaControl {

    private CinemaDAO cinemaDAO;

    public CinemaControl(Connection connection) {
        this.cinemaDAO = new CinemaDAO(connection);
    }

    // 1 Ajouter un cinema a la BD
    public boolean ajouterCinema(String nom, String adresse, String numeroTelephone, int nombreSalle) {
        if (nom == null || nom.trim().isEmpty()) {
            System.out.println(" Erreur : Le nom du cin√©ma ne peut pas √™tre vide.");
            return false;
        }

        try {
            List<Cinema> cinemasExistants = cinemaDAO.rechercherCinemasParNom(nom);
            if (!cinemasExistants.isEmpty()) {
                System.out.println(" Erreur : Un cin√©ma avec ce nom existe d√©j√†.");
                return false;
            }

            Cinema cinema = new Cinema(0, nom, adresse, numeroTelephone, nombreSalle);
            boolean success = cinemaDAO.ajouterCinema(cinema);

            if (success) {
                System.out.println(" Cin√©ma ajout√© avec succ√®s.");
            } else {
                System.out.println(" √âchec de l'ajout du cin√©ma.");
            }
            return success;

        } catch (SQLException e) {
            System.out.println(" Erreur SQL lors de l'ajout du cin√©ma : " + e.getMessage());
            return false;
        }
    }

    // 2 V√©rifier si un cin√©ma existe en base de donn√©es √† partir de son nom
    public boolean verifierExistenceCinema(String nom) throws SQLException {
        if (nom == null || nom.trim().isEmpty()) {
            System.out.println(" Erreur : Le nom du cin√©ma ne peut pas √™tre vide.");
            return false;
        }

        List<Cinema> cinemas = cinemaDAO.rechercherCinemasParNom(nom);
        boolean existe = cinemas != null && !cinemas.isEmpty();

        if (existe) {
            System.out.println(" Le cin√©ma \"" + nom + "\" existe d√©j√†.");
        } else {
            System.out.println(" Aucun cin√©ma trouv√© avec ce nom.");
        }

        return existe;
    }

    // 3 changer le nom du cinema existant
    public boolean renommerCinema(int idCinema, String nouveauNom) throws SQLException {
        if (idCinema <= 0) {
            System.out.println(" Erreur : L'ID du cin√©ma est invalide.");
            return false;
        }

        if (nouveauNom == null || nouveauNom.trim().isEmpty()) {
            System.out.println(" Erreur : Le nouveau nom du cin√©ma ne peut pas √™tre vide.");
            return false;
        }

        // V√©rifier si un autre cin√©ma porte d√©j√† ce nom
        if (verifierExistenceCinema(nouveauNom)) {
            System.out.println(" Erreur : Un cin√©ma avec ce nom existe d√©j√†.");
            return false;
        }

        // R√©cup√©rer l'ancien cin√©ma pour conserver ses autres informations
        Cinema ancienCinema = cinemaDAO.getCinemaById(idCinema);
        if (ancienCinema == null) {
            System.out.println(" Erreur : Aucun cin√©ma trouv√© avec cet ID.");
            return false;
        }

        // Cr√©er un nouvel objet Cinema avec le nouveau nom et les anciennes valeurs
        Cinema cinemaModifie = new Cinema(
            idCinema,
            nouveauNom, 
            ancienCinema.getAdresse(),
            ancienCinema.getNumeroTelephone(),
            ancienCinema.getNombreSalle()
        );

        // Mettre √† jour le cin√©ma
        boolean success = cinemaDAO.mettreAJourCinema(cinemaModifie);

        if (success) {
            System.out.println(" Cin√©ma renomm√© avec succ√®s en \"" + nouveauNom + "\".");
        } else {
            System.out.println(" √âchec du renommage du cin√©ma.");
        }

        return success;
    }

    // 4 Supprimer un cin√©ma et ses salles associ√©es
    public boolean supprimerCinemaEtSalles(int idCinema) throws SQLException {
        if (idCinema <= 0) {
            System.out.println(" Erreur : ID du cin√©ma invalide.");
            return false;
        }

        // V√©rifier si le cin√©ma existe avant de le supprimer
        Cinema cinema = cinemaDAO.getCinemaById(idCinema);
        if (cinema == null) {
            System.out.println(" Erreur : Aucun cin√©ma trouv√© avec cet ID.");
            return false;
        }

        // Supprimer le cin√©ma et ses salles
        boolean success = cinemaDAO.supprimerCinemaEtSalles(idCinema);

        if (success) {
            System.out.println(" Cin√©ma supprim√© avec succ√®s, ainsi que toutes ses salles associ√©es.");
        } else {
            System.out.println(" √âchec de la suppression du cin√©ma.");
        }

        return success;
    }

    // 5 Afficher tt les information d'un cinema
    public void afficherDetailsCinema(int idCinema) throws SQLException {
        if (idCinema <= 0) {
            System.out.println("‚ùå Erreur : ID du cin√©ma invalide.");
            return;
        }

        Cinema cinema = cinemaDAO.getCinemaById(idCinema);
        
        if (cinema == null) {
            System.out.println("‚ùå Aucun cin√©ma trouv√© avec cet ID.");
            return;
        }

        // Affichage des d√©tails du cin√©ma
        System.out.println("üé¨ D√©tails du Cin√©ma :");
        System.out.println("ID : " + cinema.getIdCinema());
        System.out.println("Nom : " + cinema.getNomCinema());
        System.out.println("Adresse : " + cinema.getAdresse());
        System.out.println("Num√©ro de t√©l√©phone : " + cinema.getNumeroTelephone());
        System.out.println("Nombre de salles : " + cinema.getNombreSalle());
    }

 // 6 R√©cup√©rer et afficher la liste de tous les cin√©mas
    public List<Cinema> listerTousCinemas() throws SQLException {
        List<Cinema> cinemas = cinemaDAO.getTousLesCinemas();

        if (cinemas.isEmpty()) {
            System.out.println("Aucun cin√©ma trouv√©.");
            return cinemas;
        }

        System.out.println("üé¨ Liste des cin√©mas :");
        for (Cinema cinema : cinemas) {
            System.out.println("- ID : " + cinema.getIdCinema() + 
                               ", Nom : " + cinema.getNomCinema() + 
                               ", Adresse : " + cinema.getAdresse() + 
                               ", T√©l√©phone : " + cinema.getNumeroTelephone() + 
                               ", Salles : " + cinema.getNombreSalle());
        }
		return cinemas;
    }

 // 7  Mettre √† jour un cin√©ma
    public boolean mettreAJourCinema(Cinema cinema) {
        return cinemaDAO.mettreAJourCinema(cinema);
    }

    //  8 Supprimer un cin√©ma sans supprimer ses salles associ√©es
    public boolean supprimerCinema(int idCinema) {
        return cinemaDAO.supprimerCinema(idCinema);
    }
    //Rechercher un cinema par Id
    public Cinema getCinemaById(int idCinema) {
        return cinemaDAO.getCinemaById(idCinema); // Appel √† la DAO
    }

}



	


